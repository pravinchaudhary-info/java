//8) Write a java program that check weather the given no is prime or not.
import java.util.*;
class pra8
{
public static void main(String args[])
{
int n,i,flag=0;
Scanner in = new Scanner(System.in);
System.out.println("Enter No");
n=in.nextInt();
for(i=2;i<=n/2;i++)
{
if(n%i==0)
{
flag=1;
}
}
if(flag==0)
{
System.out.println("no is prime");
}
else
{
System.out.println("no is not prime");
}
}
}




//12) Write a java program to sort the elements of an array in Ascending Order.
class PR12
{
public static void main(String[] args)
{
int arr[]={1,8,5,16,19,10,12};
int temp;
System.out.println("Original Array");
for(int i=0;i<arr.length;i++)
System.out.println(arr[i]+" ");
for(int i=0;i<arr.length;i++)
{
for(int j=0;j<i;j++)
{
if(arr[i]<=arr[j])
{
temp=arr[i];
arr[i]=arr[j];
arr[j]=temp;
}
}
}
System.out.println("\nAscending Array");
for(int i=0;i<arr.length;i++)
System.out.print(arr[i]+" ");
}
}



//22) Write a java program which implements the concept of Multilevel inheritance.
class student
{
int no;
student(int x)
{
no=x;
}
void display()
{
System.out.println("Student no:"+no);
}
}
class faculty extends student
{
int sub1,sub2;
faculty(int x,int y,int z)
{
super(x);
sub1=y;
sub2=z;
}
void show()
{
display();
System.out.println("sub1="+sub1);
System.out.println("sub2="+sub2);
}
}
class principal extends faculty
{
int total;
principal(int x,int y,int z)
{
super(x,y,z);
}
void print()
{
total=sub1+sub2;
System.out.println("total="+total);
}
}
class pra22
{
public static void main(String args[])
{
principal p=new principal(1,70,80);
p.show();
p.print();
}
}


//24) Write a java program which shows the Method Overriding.
class sample
{
int x;
int y;
sample(int a,int b)
{
int c;
x=a;
y=b;
}
void show()
{
System.out.println(+x);
System.out.println(+y);
}
}
class example extends sample
{
int z;
example(int a,int b,int c)
{
super(a,b);
z=c;
}
void show()
{
System.out.println(+x);
System.out.println(+y);
System.out.println(+z);
}
}
class pra24
{
public static void main(String args[])
{
example e=new example(10,20,30);
sample s=new sample(50,90);
s.show();
e.show();
}
}





//26) Write a java program to implement abstract class and abstract method.
import java.util.*;
abstract class demo
{
int x;
abstract void display();
}
abstract class demo1 extends demo
{
abstract void display();
{
System.out.println("hello");
}
}
class pra26
{
public static void main(String args[])
{
demo1 d = new demo1()
{
void display()
{
System.out.println("hi");
}
};
d.display();
}
}


//28) Write a java program which implements Multiple Interfaces.
interface my_con
{
int num1=10;
int num2=20;
int num3=30;
String value="Marks ";
}
interface my_method
{
public void display_value();
public void display_marks();
public void display_total();
}
class operation implements my_con,my_method
{
public void display_value()
{
System.out.println("The Value Are "+value);
}
public void display_marks()
{
System.out.println("Marks1 : "+num1);
System.out.println("Marks2 : "+num2);
System.out.println("Marks3 : "+num3);
}
public void display_total()
{
int total=num1+num2+num3;
System.out.println("Total Is : "+total);
}
}
public class PR28
{
public static void main(String[] args)
{
operation o1=new operation();
o1.display_value();
o1.display_marks();
o1.display_total();
}
}


//31) Write a java program to implement the methods of string class.
class pra31
{
public static void main(String args[])
{
StringBuffer str = new StringBuffer("object language");
System.out.println("original string:" +str);
System.out.println("Length of String:"+str.length());
for(int i=0; i<str.length(); i++)
{
int p=i+1;
System.out.println("Char at Position" +p+ "is"+str.charAt(i));
}
String astring = new String(str.toString());
int pos = astring.indexOf("language");
System.out.println("Modified String"+str);
str.setCharAt(6,'-');
System.out.println("String now"+str);
str.append("improves security.");
System.out.println("Append String"+str);
}
}


//36. Write a java program which creates threads using the thread class
class ClassA extends Thread
{
public void run()
{
for(int i=1;i<=5;i++)
{
System.out.println("Class A : " + i);
}
}
}
class ClassB extends Thread
{
public void run()
{
for(int i=1;i<=5;i++)
{
System.out.println("Class B : " + i);
}
}
}
class ClassC extends Thread
{
public void run()
{
for(int i=1;i<=5;i++)
{
System.out.println("Class C : " + i);
}
}
}
class Program36
{
public static void main(String args[])
{
ClassA objA = new ClassA();
ClassB objB = new ClassB();
ClassC objC = new ClassC();
objA.start();
objB.start();
objC.start();
}
}


//40) Write a java program which uses try and catch for Exception Handling.
class Program40{
public static void main(String args[])
{
int a,b,c;
int x,y;
a = 10;
b = 5;
c = 5;
try
{
x = a /(b-c);
System.out.println("X : " + x);
}
catch (ArithmeticException e)
{
System.out.println("\nError !! Can not divided by Zero");
}
y=a/(b+c);
System.out.println("y ="+y);
}
}



//44) Write a java program which shows throwing our own Exception.
class MyException extends Exception
{
MyException(String str)
{
System.out.println(str);
}
}
class Program44
{
public static void main(String str[])
{
int x = 50,y = 10,z;
try
{
z = x/y;
if(z<10)
{
throw new MyException("ArithmeticException Found");
}
}
catch(MyException e)
{
System.out.println("Exception Occure");
}
finally
{
System.out.println("I am always here.....");
}
}
}
